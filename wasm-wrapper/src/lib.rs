use wasm_bindgen::prelude::*;
use render_engine::{TypstWrapper, RenderConfig, OutputFormat};

// Import the `console.log` function from the `console` module - only in debug builds
#[cfg(feature = "debug")]
#[wasm_bindgen]
extern "C" {
    #[wasm_bindgen(js_namespace = console)]
    fn log(s: &str);
}

// Define a macro to make console logging easier - only in debug builds
#[cfg(feature = "debug")]
macro_rules! console_log {
    ($($t:tt)*) => (unsafe { log(&format_args!($($t)*).to_string()) })
}

// No-op console logging for release builds
#[cfg(not(feature = "debug"))]
macro_rules! console_log {
    ($($t:tt)*) => {}
}

/// Initialize panic hook for better error messages in development
#[wasm_bindgen(start)]
pub fn main() {
    #[cfg(feature = "console_error_panic_hook")]
    console_error_panic_hook::set_once();
}

/// Test function that calls typst-wrapper.render() with dummy Typst markup
#[wasm_bindgen]
pub fn test() -> Result<JsValue, JsValue> {
    // Create a simple test Typst document
    let test_markup = r#"
#set page(width: 8.5in, height: 11in, margin: 1in)
#set text(font: "Times New Roman", size: 12pt)

= Test Document

This is a test document generated by the render-engine WASM module.

The current time is: #datetime.today().display()

== Features Tested
- Basic text rendering
- Headings and formatting
- Page setup

This demonstrates that the typst-wrapper integration is working correctly.
"#;

    // Configure for SVG output (default)
    let config = RenderConfig {
        format: OutputFormat::Svg,
    };
    
    // Call the render function
    match TypstWrapper::render(test_markup, Some(config)) {
        Ok(pages) => {
            console_log!("Render successful! Generated {} page(s)", pages.len());
            
            // For demo purposes, return the number of pages and size of first page
            let result = if !pages.is_empty() {
                format!("Success: {} pages generated. First page size: {} bytes", 
                       pages.len(), pages[0].len())
            } else {
                "Success: No pages generated".to_string()
            };
            
            Ok(JsValue::from_str(&result))
        }
        Err(e) => {
            console_log!("Render failed: {:?}", e);
            Err(JsValue::from_str(&format!("Render failed: {:?}", e)))
        }
    }
}

/// Test function that renders to PDF format
#[wasm_bindgen]
pub fn test_pdf() -> Result<JsValue, JsValue> {
    // Create a simple test Typst document
    let test_markup = r#"
#set page(width: 8.5in, height: 11in, margin: 1in)
#set text(font: "Times New Roman", size: 12pt)

= PDF Test Document

This is a test document generated by the render-engine WASM module in PDF format.

== PDF-Specific Features
- Vector graphics preservation  
- Font embedding
- Print-ready output

This demonstrates PDF rendering capability.
"#;

    // Configure for PDF output
    let config = RenderConfig {
        format: OutputFormat::Pdf,
    };
    
    // Call the render function
    match TypstWrapper::render(test_markup, Some(config)) {
        Ok(pages) => {
            console_log!("PDF render successful! Generated {} page(s)", pages.len());
            
            let result = if !pages.is_empty() {
                format!("Success: PDF generated with {} bytes", pages[0].len())
            } else {
                "Success: No PDF data generated".to_string()
            };
            
            Ok(JsValue::from_str(&result))
        }
        Err(e) => {
            console_log!("PDF render failed: {:?}", e);
            Err(JsValue::from_str(&format!("PDF render failed: {:?}", e)))
        }
    }
}

/// Render arbitrary Typst markup from JavaScript
#[wasm_bindgen]
pub fn render_typst(markup: &str, format: Option<String>) -> Result<JsValue, JsValue> {
    // Parse format parameter
    let output_format = match format.as_deref().unwrap_or("svg").to_lowercase().as_str() {
        "pdf" => OutputFormat::Pdf,
        _ => OutputFormat::Svg,
    };
    
    let config = RenderConfig {
        format: output_format,
    };
    
    match TypstWrapper::render(markup, Some(config)) {
        Ok(pages) => {
            console_log!("Custom render successful! Generated {} page(s)", pages.len());
            
            // Convert the first page to base64 for JavaScript consumption
            if !pages.is_empty() {
                // For now, just return success info - in a real app you'd return the actual data
                let result = format!("Success: Generated {} pages, first page {} bytes", 
                                    pages.len(), pages[0].len());
                Ok(JsValue::from_str(&result))
            } else {
                Ok(JsValue::from_str("Success: No pages generated"))
            }
        }
        Err(e) => {
            console_log!("Custom render failed: {:?}", e);
            Err(JsValue::from_str(&format!("Render failed: {:?}", e)))
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    
    #[test]
    fn test_basic_typst_render() {
        // Test basic functionality without WASM bindings
        let test_markup = "= Test\nThis is a test document.";
        
        let config = RenderConfig {
            format: OutputFormat::Svg,
        };
        
        let result = TypstWrapper::render(test_markup, Some(config));
        assert!(result.is_ok(), "Basic render should succeed");
        
        let pages = result.unwrap();
        assert!(!pages.is_empty(), "Should generate at least one page");
        assert!(!pages[0].is_empty(), "First page should have content");
    }
    
    #[test] 
    fn test_pdf_render() {
        let test_markup = "= PDF Test\nTesting PDF output.";
        
        let config = RenderConfig {
            format: OutputFormat::Pdf,
        };
        
        let result = TypstWrapper::render(test_markup, Some(config));
        assert!(result.is_ok(), "PDF render should succeed");
        
        let pages = result.unwrap();
        assert_eq!(pages.len(), 1, "PDF should generate exactly one item");
        assert!(!pages[0].is_empty(), "PDF should have content");
    }
}
